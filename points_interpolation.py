# -*- coding: utf-8 -*-
"""
/***************************************************************************
 PointInterpolation
                                 A QGIS plugin
 This plugin interpolates points between two points and draw points at specified distance on that line.
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2019-12-04
        git sha              : $Format:%H$
        copyright            : (C) 2019 by shehar bano
        email                : sheharbanoafzal@hotmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction
from PyQt5.QtCore import QVariant
from qgis.gui import QgsMessageBar
from qgis.gui import QgsMapToolEmitPoint
from qgis.utils import iface
from qgis import *
from PyQt5.QtCore import *
from PyQt5.QtGui import *
from qgis.core import *
from qgis.gui import *
from PyQt5 import QtGui
from PyQt5.QtCore import *
from qgis.core import QgsProject
from qgis.core import QgsVectorLayer, QgsPoint
from qgis.core import QgsFeature
import processing
from os import path
from PyQt5.QtWidgets import QApplication, QWidget, QPushButton, QMessageBox, QFileDialog
from qgis.core import QgsDistanceArea, QgsCoordinateReferenceSystem, QgsPoint, QgsApplication
from qgis.core import (
  QgsGeometry,
  QgsPoint,
  QgsPointXY,
  QgsWkbTypes,
  QgsProject,
  QgsFeatureRequest,
  QgsDistanceArea
)
from qgis.core import QgsDistanceArea, QgsCoordinateReferenceSystem, QgsPoint, QgsApplication
from qgis.core import QgsProject
from PyQt5.QtCore import *
from qgis.core import QgsProject
from PyQt5.QtCore import *
import collections
# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .points_interpolation_dialog import PointInterpolationDialog
from .points_interpolation_dialog import PointOffsetDialog
from .points_interpolation_dialog import OffsetInterpolateDialog

import os.path


class PointInterpolation:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'PointInterpolation_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Points Interpolation')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('PointInterpolation', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/points_interpolation/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Points Interpolation'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


        icon_path = ':/plugins/points_interpolation/lineicon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Line Offset'),
            callback=self.run1,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True

        icon_path = ':/plugins/points_interpolation/linepoint.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Offset Interpolate'),
            callback=self.run2,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&Points Interpolation'),
                action)
            self.iface.removeToolBarIcon(action)

    def OpenBrowse(self):
        file = QFileDialog()
        file.setAcceptMode(1)
        dir_ = file.getSaveFileName(None, 'Save as file:', 'C:\\', filter="ESRI Shapefiles(*.shp)")
        self.dlg.line.setText(str(dir_))

    def OpenBrowse2(self):
        file = QFileDialog()
        file.setAcceptMode(1)
        dir_ = file.getSaveFileName(None, 'Save as file:', 'C:\\', filter="ESRI Shapefiles(*.shp)")
        self.dlg.points.setText(str(dir_))

    def OpenBrowse3(self):
        file = QFileDialog()
        file.setAcceptMode(1)
        dir_ = file.getSaveFileName(None, 'Save as file:', 'C:\\', filter="ESRI Shapefiles(*.shp)")
        self.dlg2.output.setText(str(dir_))

    def OpenBrowse4(self):
        file = QFileDialog()
        file.setAcceptMode(1)
        dir_ = file.getSaveFileName(None, 'Save as file:', 'C:\\', filter="ESRI Shapefiles(*.shp)")
        self.dlg3.output.setText(str(dir_))

    def OpenBrowse5(self):
        file = QFileDialog()
        file.setAcceptMode(1)
        dir_ = file.getSaveFileName(None, 'Save as file:', 'C:\\', filter="ESRI Shapefiles(*.shp)")
        self.dlg3.pointoutput.setText(str(dir_))

    def points(self):
        self = qgis.utils
        vp_layer = QgsVectorLayer("Point?crs=EPSG:32754", "points", "memory")
        provider = vp_layer.dataProvider()
        QgsProject.instance().addMapLayer(vp_layer)
        vp_layer.startEditing()
        vp_layer.beginEditCommand("Draw Two Points")
        # Implement the Add Feature button
        qgis.utils.iface.actionAddFeature().trigger()
        layer = iface.activeLayer()
        self.i = 0
        def select(featureAdded):
            layer.select(featureAdded)
        if len(layer.selectedFeatures()) == 2:
            self.check()

        selection = layer.selectedFeatures()

        layer.featureAdded.connect(select)

    def clearProject(self):
        layer= iface.activeLayer()
        QgsProject.instance().removeMapLayer(layer.id())


    def distanceSplit(self, length, distance):
        #_divisions = parts_count - 1
        _parts = length / distance
        parts = _parts + 1
        self.distance2 = 0
        length_divisions_list = [0.0]
        for i in range(int(length)):
            self.distance2 = self.distance2 + distance
            length_divisions_list.append(self.distance2)

        #length_divisions_list = [i * distance for i in range(int(parts))]
        return length_divisions_list
        #_divisions = distance - 1
        #_parts = length /distance
        #_parts = _parts + 1
        #length_divisions_list = [i * _parts for i in range(int(distance))]
        #return length_divisions_list

    def draw(self):
        layer = iface.activeLayer()
        features = layer.selectedFeatures()
        selected_fid = []
        points = []
        pointdist = []

        if not self.dlg.checkBox.isChecked():
            if (len(features)) == 2 and self.dlg.distance.text() != '':
                for feature in layer.selectedFeatures():
                    point = feature.geometry().asPoint()
                    xpoint = point.x()
                    ypoint = point.y()
                    Qpoint = QgsPointXY(xpoint, ypoint)
                    points.append(Qpoint)
                distcheck = 0
                i = 0
                for point in points:
                    distance = QgsDistanceArea()
                    Qpoint1 = points[i]
                    j = 0
                    for point in points:
                        Qpoint2 = points[j]
                        dist = distance.measureLine(Qpoint1, Qpoint2)

                        pointdist.append(dist)
                        if dist > distcheck:
                            distcheck = dist
                            point_1 = i
                            point_2 = j
                        j += 1
                    i += 1
                print (distcheck)
                print (pointdist)
                print (point_1, point_2)
                for point in points:
                    point = feature.geometry().asPoint()
                    point1x = (points[point_1].x())
                    point1y = (points[point_1].y())
                    selected_fid.append(feature.id())
                for point in points:
                    point2x = (points[point_2].x())
                    point2y = (points[point_2].y())
                    selected_fid.append(feature.id())

                # create a new line layer in memory from first to last point
                v_layer = QgsVectorLayer("LineString?crs=EPSG:32754", "line", "memory")
                pr = v_layer.dataProvider()
                seg = QgsFeature()
                v_layer.startEditing()
                line_start = QgsPoint(point1x, point1y)
                line_end = QgsPoint(point2x, point2y)
                seg.setGeometry(QgsGeometry.fromPolyline([line_end, line_start]))
                geomline = QgsGeometry.fromPolyline([line_end, line_start])
                pr.addFeatures([seg])
                distancegeom = QgsDistanceArea()
                line_length = seg.geometry().length()
                # Update extent of the layer
                v_layer.updateExtents()
                v_layer.commitChanges()
                path = self.dlg.line.text()
                user = path.split("'")

                if self.dlg.length.text() != '':
                        length = self.dlg.length.text()
                        if distcheck > float(length):
                            if self.dlg.line.text() != '':
                                result = processing.runAndLoadResults("native:linesubstring",
                                               {'INPUT': v_layer, 'START_DISTANCE': 0,
                                                'END_DISTANCE': float(length), 'OUTPUT': user[1]})

                            else:
                                result = processing.runAndLoadResults("native:linesubstring",
                                                             {'INPUT': v_layer, 'START_DISTANCE': 0,
                                                              'END_DISTANCE': float(length), 'OUTPUT': 'memory:'})

                        elif distcheck < float(length):
                            lend = float(length) - distcheck
                            if self.dlg.line.text() != '':
                                result = processing.runAndLoadResults("native:extendlines", {'INPUT': v_layer,'START_DISTANCE':0,'END_DISTANCE': lend,'OUTPUT':user[1]})
                            else:
                                result = processing.runAndLoadResults("native:extendlines", {'INPUT': v_layer,'START_DISTANCE':0,'END_DISTANCE':lend,'OUTPUT':'memory:'})


                        result_interpolate = processing.runAndLoadResults("native:pointsalonglines",
                                                         {'INPUT': result['OUTPUT'],
                                                          'DISTANCE': self.dlg.distance.text(), 'START_OFFSET': 0, 'END_OFFSET': 0,
                                                          'OUTPUT': 'memory:'})



                elif self.dlg.length.text() == '':
                        QgsProject.instance().addMapLayer(v_layer)
                        if self.dlg.line.text() == '':
                            result_interpolate = processing.runAndLoadResults("native:pointsalonglines",
                                                         {'INPUT': v_layer,
                                                          'DISTANCE': self.dlg.distance.text(), 'START_OFFSET': 0, 'END_OFFSET': 0,
                                                          'OUTPUT': 'memory:'})
                        elif self.dlg.line.text() != '':
                            result_interpolate = processing.runAndLoadResults("native:pointsalonglines",
                                                         {'INPUT': v_layer,
                                                          'DISTANCE': self.dlg.distance.text(), 'START_OFFSET': 0,
                                                          'END_OFFSET': 0,
                                                          'OUTPUT': user[1]})

                #if self.dlg.line.text() != '':
                    #QgsVectorFileWriter.writeAsVectorFormat(v_layer, user[1], "UTF-8", layer.crs(), "ESRI Shapefile")
                    #linelayer = QgsVectorLayer(user[1], 'line')
                    #QgsProject.instance().addMapLayer(linelayer)
                #else:
                    #QgsVectorFileWriter.writeAsVectorFormat(v_layer, "memory", "UTF-8", layer.crs(), "ESRI Shapefile")
                    #QgsProject.instance().addMapLayer(v_layer)

                pointLayer = QgsVectorLayer("MultiPoint?crs=EPSG:32754&field=id:integer&field=distance:integer&index=yes"
                                            , "points", "memory")
                pointLayer.startEditing()
                distance = self.dlg.distance.text()
                print(distcheck)
                print(line_length)
                num = 1
                points_distance_list = self.distanceSplit(distcheck, float(distance))
                print (points_distance_list)
                numcheck = ( distcheck/float(distance) ) + 1
                for index, point in enumerate(points_distance_list):
                    print(point)
                    if num <= numcheck:
                        feature = QgsFeature(pointLayer.fields())
                        point_geom = geomline.interpolate(point)
                        feature["id"] = num
                        feature["distance"] = point
                        feature.setGeometry(point_geom)
                        pointLayer.addFeature(feature)
                        num = num + 1

                path = self.dlg.points.text()
                user1 = path.split("'")
                if self.dlg.points.text() != '':
                    points_result = processing.run("native:addautoincrementalfield", {
                        'INPUT': result_interpolate['OUTPUT'],
                        'FIELD_NAME': 'Id', 'START': 1, 'GROUP_FIELDS': ['offset'],
                        'SORT_EXPRESSION': 'instance',
                        'SORT_ASCENDING': True, 'SORT_NULLS_FIRST': False, 'OUTPUT': 'memory:'})
                    processing.run("native:buffer", {'INPUT': points_result['OUTPUT'],
                                                     'DISTANCE': 0.5,
                                                     'SEGMENTS': 10,
                                                     'DISSOLVE': False,
                                                     'END_CAP_STYLE': 0,
                                                     'JOIN_STYLE': 0,
                                                     'MITER_LIMIT': 10,
                                                     'OUTPUT': user1[1]})
                    linelayer = QgsVectorLayer(user1[1], 'buffer_points')
                    QgsProject.instance().addMapLayer(linelayer)
                else:
                    points_result = processing.run("native:addautoincrementalfield", {
                        'INPUT': result_interpolate['OUTPUT'],
                        'FIELD_NAME': 'Id', 'START': 1, 'GROUP_FIELDS': ['offset'],
                        'SORT_EXPRESSION': 'instance',
                        'SORT_ASCENDING': True, 'SORT_NULLS_FIRST': False, 'OUTPUT': 'memory:'})
                    processing.runAndLoadResults("native:buffer", {'INPUT':  points_result['OUTPUT'],
                                                                   'DISTANCE': 0.5,
                                                                   'SEGMENTS': 10,
                                                                   'DISSOLVE': False,
                                                                   'END_CAP_STYLE': 0,
                                                                   'JOIN_STYLE': 0,
                                                                   'MITER_LIMIT': 10,
                                                                   'OUTPUT': 'memory:'})

                pointLayer.commitChanges()
                layer.commitChanges()
                QgsProject.instance().removeMapLayer(layer.id())
                self.iface.actionCancelEdits().trigger()
            else:
                if self.dlg.distance.text() == '':
                    msg = QMessageBox()
                    msg.setIcon(QMessageBox.Critical)
                    msg.setText("Error: Select distance.")
                    # msg.setInformativeText('More information')
                    msg.setWindowTitle("Warning: Error")
                    msg.exec_()
                    pass
                else:
                    msg = QMessageBox()
                    msg.setIcon(QMessageBox.Critical)
                    msg.setText("Error: Select two points")
                    # msg.setInformativeText('More information')
                    msg.setWindowTitle("Warning: Error")
                    msg.exec_()
                    pass

        if self.dlg.checkBox.isChecked():
            input_layer = self.dlg.mMapLayerComboBox.currentLayer()
            featuresvector = input_layer.getFeatures()
            start = self.dlg.start.text()
            end = self.dlg.end.text()
            for f in featuresvector:
                distcheck = f.geometry().length()
            path = self.dlg.line.text()
            user = path.split("'")
            print(distcheck)
            if self.dlg.end.text() != '':
                length = float(end)-float(start)
                if distcheck > float(length):
                    if self.dlg.line.text() != '':
                        result = processing.runAndLoadResults("native:linesubstring",
                                                              {'INPUT': input_layer, 'START_DISTANCE': float(start),
                                                               'END_DISTANCE': float(end), 'OUTPUT': user[1]})
                    else:
                        result = processing.runAndLoadResults("native:linesubstring",
                                                              {'INPUT': input_layer,  'START_DISTANCE': float(start),
                                                               'END_DISTANCE': float(end), 'OUTPUT': 'memory:'})

                elif distcheck < float(length):
                    lend = float(length) - distcheck
                    if self.dlg.line.text() != '':
                        result = processing.runAndLoadResults("native:extendlines",
                                                              {'INPUT': input_layer,  'START_DISTANCE': float(start),
                                                               'END_DISTANCE': float(end), 'OUTPUT': user[1]})
                    else:
                        result = processing.runAndLoadResults("native:extendlines",
                                                              {'INPUT': input_layer,  'START_DISTANCE': float(start),
                                                               'END_DISTANCE': float(end), 'OUTPUT': 'memory:'})


                result_interpolate = processing.runAndLoadResults("native:pointsalonglines",
                                                                  {'INPUT': result['OUTPUT'],
                                                                   'DISTANCE': self.dlg.distance.text(),
                                                                   'START_OFFSET': 0, 'END_OFFSET': 0,
                                                                   'OUTPUT': 'memory:'})

            elif self.dlg.end.text() == '':
                if self.dlg.line.text() == '':
                    result_interpolate = processing.runAndLoadResults("native:pointsalonglines",
                                                                      {'INPUT': input_layer,
                                                                       'DISTANCE': self.dlg.distance.text(),
                                                                       'START_OFFSET': 0, 'END_OFFSET': 0,
                                                                       'OUTPUT': 'memory:'})
                elif self.dlg.line.text() != '':
                    result_interpolate = processing.runAndLoadResults("native:pointsalonglines",
                                                                      {'INPUT': input_layer,
                                                                       'DISTANCE': self.dlg.distance.text(),
                                                                       'START_OFFSET': 0,
                                                                       'END_OFFSET': 0,
                                                                       'OUTPUT': user[1]})


            path = self.dlg.points.text()
            user1 = path.split("'")
            if self.dlg.points.text() != '':

                points_result = processing.run("native:addautoincrementalfield", {
                    'INPUT': result_interpolate['OUTPUT'],
                    'FIELD_NAME': 'Id', 'START': 1, 'GROUP_FIELDS': ['offset'], 'SORT_EXPRESSION': 'instance',
                    'SORT_ASCENDING': True, 'SORT_NULLS_FIRST': False, 'OUTPUT': 'memory:'})

                processing.run("native:buffer", {'INPUT': points_result['OUTPUT'],
                                                 'DISTANCE': 0.5,
                                                 'SEGMENTS': 10,
                                                 'DISSOLVE': False,
                                                 'END_CAP_STYLE': 0,
                                                 'JOIN_STYLE': 0,
                                                 'MITER_LIMIT': 10,
                                                 'OUTPUT': user1[1]})
                linelayer = QgsVectorLayer(user1[1], 'buffer_points')
                QgsProject.instance().addMapLayer(linelayer)
            else:
                points_result = processing.run("native:addautoincrementalfield", {
                    'INPUT': result_interpolate['OUTPUT'],
                    'FIELD_NAME': 'Id', 'START': 1, 'GROUP_FIELDS': ['offset'], 'SORT_EXPRESSION': 'instance',
                    'SORT_ASCENDING': True, 'SORT_NULLS_FIRST': False, 'OUTPUT': 'memory:'})
                processing.runAndLoadResults("native:buffer", {'INPUT': points_result['OUTPUT'],
                                                               'DISTANCE': 0.5,
                                                               'SEGMENTS': 10,
                                                               'DISSOLVE': False,
                                                               'END_CAP_STYLE': 0,
                                                               'JOIN_STYLE': 0,
                                                               'MITER_LIMIT': 10,
                                                               'OUTPUT': 'memory:'})

    def offsetline(self):
        if self.dlg2.layer.currentText() != '':
            layers = self.dlg2.layer.currentLayer()
            self.distanceoffset = self.dlg2.distance.text()
            rows = self.dlg2.rows.text()
            self.distance1 = 0

            if self.dlg2.direction.currentText() == 'Left/Down' and self.dlg2.output.text() == '':
                if self.dlg2.rows.text() == '1':
                    result = processing.run("native:offsetline",
                                   {'INPUT': layers, 'DISTANCE': -(float(self.distanceoffset)),
                                    'SEGMENTS': 8, 'JOIN_STYLE': 0, 'MITER_LIMIT': 2, 'OUTPUT': 'memory:'})

                    result_layer = processing.runAndLoadResults("native:addautoincrementalfield",
                                                  {'INPUT': result['OUTPUT'], 'FIELD_NAME': 'Id', 'START': 1,
                                                   'GROUP_FIELDS': [],
                                                   'SORT_EXPRESSION': '', 'SORT_ASCENDING': True,
                                                   'SORT_NULLS_FIRST': False, 'OUTPUT': 'memory:'})


                elif self.dlg2.rows.text() != '1':
                    result = processing.run("native:arrayoffsetlines",
                                                 {'INPUT': layers,
                                                  'COUNT': int(rows), 'OFFSET': -(float(self.distanceoffset)), 'SEGMENTS': 8,
                                                  'JOIN_STYLE': 0, 'MITER_LIMIT': 2,
                                                  'OUTPUT': 'memory:'})
                    result_layer = processing.runAndLoadResults("native:addautoincrementalfield",
                                                  {'INPUT': result['OUTPUT'], 'FIELD_NAME': 'Id', 'START': 1,
                                                   'GROUP_FIELDS': [],
                                                   'SORT_EXPRESSION': '', 'SORT_ASCENDING': True,
                                                   'SORT_NULLS_FIRST': False, 'OUTPUT': 'memory:'})

            if self.dlg2.direction.currentText() == 'Right/Upside' and self.dlg2.output.text() == '':
                if self.dlg2.rows.text() == '1':
                    result = processing.run("native:offsetline",
                                                 {'INPUT': layers, 'DISTANCE': float(self.distanceoffset),
                                                  'SEGMENTS': 8, 'JOIN_STYLE': 0, 'MITER_LIMIT': 2,
                                                  'OUTPUT': 'memory:'})
                    result_layer = processing.runAndLoadResults("native:addautoincrementalfield",

                                                  {'INPUT': result['OUTPUT'], 'FIELD_NAME': 'Id', 'START': 1,
                                                   'GROUP_FIELDS': [],
                                                   'SORT_EXPRESSION': '', 'SORT_ASCENDING': True,
                                                   'SORT_NULLS_FIRST': False, 'OUTPUT': 'memory:'})


                elif self.dlg2.rows.text() != '1':
                    result = processing.run("native:arrayoffsetlines",
                                                 {'INPUT': layers,
                                                  'COUNT': int(rows), 'OFFSET': float(self.distanceoffset), 'SEGMENTS': 8,
                                                  'JOIN_STYLE': 0, 'MITER_LIMIT': 2,
                                                  'OUTPUT': 'memory:'})

                    result_layer = processing.runAndLoadResults("native:addautoincrementalfield",
                                                  {'INPUT': result['OUTPUT'], 'FIELD_NAME': 'Id', 'START': 1,
                                                   'GROUP_FIELDS': [],
                                                   'SORT_EXPRESSION': '', 'SORT_ASCENDING': True,
                                                   'SORT_NULLS_FIRST': False, 'OUTPUT': 'memory:'})



            if self.dlg2.direction.currentText() == 'Left/Down' and self.dlg2.output.text() != '':
                path = self.dlg2.output.text()
                user = path.split("'")
                if self.dlg2.rows.text() == '1':
                    result = processing.run("native:offsetline",
                                   {'INPUT': layers, 'DISTANCE': -(float(self.distanceoffset)),
                                    'SEGMENTS': 8, 'JOIN_STYLE': 0, 'MITER_LIMIT': 2, 'OUTPUT': 'memory:'})

                    result_layer = processing.runAndLoadResults("native:addautoincrementalfield",
                                                  {'INPUT': result['OUTPUT'], 'FIELD_NAME': 'Id', 'START': 1,
                                                   'GROUP_FIELDS': [],
                                                   'SORT_EXPRESSION': '', 'SORT_ASCENDING': True,
                                                   'SORT_NULLS_FIRST': False, 'OUTPUT': user[1]})


                elif self.dlg2.rows.text() != '':
                    result = processing.run("native:arrayoffsetlines",
                                   {'INPUT': layers,
                                    'COUNT': int(rows), 'OFFSET': -(float(self.distanceoffset)), 'SEGMENTS': 8, 'JOIN_STYLE': 0, 'MITER_LIMIT': 2,
                                    'OUTPUT': 'memory:'})
                    result_layer = processing.runAndLoadResults("native:addautoincrementalfield",
                                                  {'INPUT': result['OUTPUT'], 'FIELD_NAME': 'Id', 'START': 1,
                                                   'GROUP_FIELDS': [],
                                                   'SORT_EXPRESSION': '', 'SORT_ASCENDING': True,
                                                   'SORT_NULLS_FIRST': False, 'OUTPUT': user[1]})



            if self.dlg2.direction.currentText() == 'Right/Upside' and self.dlg2.output.text() != '':
                path = self.dlg2.output.text()
                user = path.split("'")
                if self.dlg2.rows.text() == '1':
                    result = processing.run("native:offsetline",
                                                 {'INPUT': layers, 'DISTANCE': float(self.distanceoffset),
                                                  'SEGMENTS': 8, 'JOIN_STYLE': 0, 'MITER_LIMIT': 2,
                                                  'OUTPUT': 'memory:'})
                    result_layer = processing.runAndLoadResults("native:addautoincrementalfield",
                                                  {'INPUT': result['OUTPUT'], 'FIELD_NAME': 'Id', 'START': 1,
                                                   'GROUP_FIELDS': [],
                                                   'SORT_EXPRESSION': '', 'SORT_ASCENDING': True,
                                                   'SORT_NULLS_FIRST': False, 'OUTPUT': user[1]})


                elif self.dlg2.rows.text() != '1':
                    result = processing.run("native:arrayoffsetlines",
                                                 {'INPUT': layers,
                                                  'COUNT': int(rows), 'OFFSET': float(self.distanceoffset), 'SEGMENTS': 8,
                                                  'JOIN_STYLE': 0, 'MITER_LIMIT': 2,
                                                  'OUTPUT': 'memory:'})
                    result_layer = processing.runAndLoadResults("native:addautoincrementalfield",
                                                  {'INPUT': result['OUTPUT'], 'FIELD_NAME': 'Id', 'START': 1,
                                                   'GROUP_FIELDS': [],
                                                   'SORT_EXPRESSION': '', 'SORT_ASCENDING': True,
                                                   'SORT_NULLS_FIRST': False, 'OUTPUT': user[1]})

        else:
            msg = QMessageBox()
            msg.setIcon(QMessageBox.Critical)
            msg.setText("Error: Add layer in active directory.")
            # msg.setInformativeText('More information')
            msg.setWindowTitle("Warning: Error")
            msg.exec_()
            pass

    def offsetinterpolate(self):
        if self.dlg3.layer.currentText() != '':
            layers = self.dlg3.layer.currentLayer()
            self.distanceoffset = self.dlg3.line_distance.text()
            self.point_distance_offset = self.dlg3.points_distance.text()
            rows = self.dlg3.rows.text()

            if self.dlg3.direction.currentText() == 'Right/Upside' and self.dlg3.output.text() == '' and self.dlg3.pointoutput.text() == '':
                if self.dlg3.rows.text() == '1':
                    result = processing.run("native:offsetline",
                                   {'INPUT': layers, 'DISTANCE': float(self.distanceoffset),
                                    'SEGMENTS': 8, 'JOIN_STYLE': 0, 'MITER_LIMIT': 2, 'OUTPUT': 'memory:'})

                    result_layer = processing.runAndLoadResults("native:addautoincrementalfield",
                                                  {'INPUT': result['OUTPUT'], 'FIELD_NAME': 'Id', 'START': 1,
                                                   'GROUP_FIELDS': [],
                                                   'SORT_EXPRESSION': '', 'SORT_ASCENDING': True,
                                                   'SORT_NULLS_FIRST': False, 'OUTPUT': 'memory:line'})


                    #result_layer = results['OUTPUT']
                    point_result = processing.run("native:pointsalonglines",
                                                 {'INPUT': result_layer['OUTPUT'],
                                                  'DISTANCE': self.point_distance_offset, 'START_OFFSET': 0,
                                                  'END_OFFSET': 0, 'OUTPUT': 'memory:'})
                    points_result = processing.run("native:addautoincrementalfield", {
                        'INPUT': point_result['OUTPUT'],
                        'FIELD_NAME': 'uid', 'START': 1, 'GROUP_FIELDS': ['offset'], 'SORT_EXPRESSION': 'instance',
                        'SORT_ASCENDING': True, 'SORT_NULLS_FIRST': False, 'OUTPUT': 'memory:'})

                    buffer = processing.runAndLoadResults("native:buffer", {'INPUT': points_result['OUTPUT'],
                                                                   'DISTANCE': 0.5,
                                                                   'SEGMENTS': 10,
                                                                   'DISSOLVE': False,
                                                                   'END_CAP_STYLE': 0,
                                                                   'JOIN_STYLE': 0,
                                                                   'MITER_LIMIT': 10,
                                                                   'OUTPUT': 'memory:Buffer_Points'})



                elif self.dlg3.rows.text() != '1':
                    result = processing.run("native:arrayoffsetlines",
                                                 {'INPUT': layers,
                                                  'COUNT': int(rows), 'OFFSET': float(self.distanceoffset), 'SEGMENTS': 8,
                                                  'JOIN_STYLE': 0, 'MITER_LIMIT': 2,
                                                  'OUTPUT': 'memory:'})
                    result_layer = processing.runAndLoadResults("native:addautoincrementalfield",
                                                  {'INPUT': result['OUTPUT'], 'FIELD_NAME': 'Id', 'START': 1,
                                                   'GROUP_FIELDS': [],
                                                   'SORT_EXPRESSION': '', 'SORT_ASCENDING': True,
                                                   'SORT_NULLS_FIRST': False, 'OUTPUT': 'memory:line'})

                    #result_layer = results['OUTPUT']
                    point_result = processing.run("native:pointsalonglines",
                                                 {'INPUT': result_layer['OUTPUT'],
                                                  'DISTANCE': self.point_distance_offset, 'START_OFFSET': 0,
                                                  'END_OFFSET': 0, 'OUTPUT': 'memory:'})
                    points_result = processing.run("native:addautoincrementalfield", {
                        'INPUT': point_result['OUTPUT'],
                        'FIELD_NAME': 'uid', 'START': 1, 'GROUP_FIELDS': ['offset'], 'SORT_EXPRESSION': 'instance',
                        'SORT_ASCENDING': True, 'SORT_NULLS_FIRST': False, 'OUTPUT': 'memory:'})
                    buffer = processing.runAndLoadResults("native:buffer", {'INPUT': points_result['OUTPUT'],
                                                                   'DISTANCE': 0.5,
                                                                   'SEGMENTS': 10,
                                                                   'DISSOLVE': False,
                                                                   'END_CAP_STYLE': 0,
                                                                   'JOIN_STYLE': 0,
                                                                   'MITER_LIMIT': 10,
                                                                   'OUTPUT': 'memory:Buffer_Points'})


            if self.dlg3.direction.currentText() == 'Left/Down' and self.dlg3.output.text() == '' and self.dlg3.pointoutput.text() == '':
                if self.dlg3.rows.text() == '1':
                    result = processing.run("native:offsetline",
                                                 {'INPUT': layers, 'DISTANCE': -(float(self.distanceoffset)),
                                                  'SEGMENTS': 8, 'JOIN_STYLE': 0, 'MITER_LIMIT': 2,
                                                  'OUTPUT': 'memory:'})
                    result_layer = processing.runAndLoadResults("native:addautoincrementalfield",
                                                  {'INPUT': result['OUTPUT'], 'FIELD_NAME': 'Id', 'START': 1,
                                                   'GROUP_FIELDS': [],
                                                   'SORT_EXPRESSION': '', 'SORT_ASCENDING': True,
                                                   'SORT_NULLS_FIRST': False, 'OUTPUT': 'memory:line'})

                    #result_layer = results['OUTPUT']
                    point_result = processing.run("native:pointsalonglines",
                                                 {'INPUT': result_layer['OUTPUT'],
                                                  'DISTANCE': self.point_distance_offset, 'START_OFFSET': 0,
                                                  'END_OFFSET': 0, 'OUTPUT': 'memory:'})
                    points_result = processing.run("native:addautoincrementalfield", {
                        'INPUT': point_result['OUTPUT'],
                        'FIELD_NAME': 'uid', 'START': 1, 'GROUP_FIELDS': ['offset'], 'SORT_EXPRESSION': '',
                        'SORT_ASCENDING': True, 'SORT_NULLS_FIRST': False, 'OUTPUT': 'memory:'})
                    processing.runAndLoadResults("native:buffer", {'INPUT': points_result['OUTPUT'],
                                                                   'DISTANCE': 0.5,
                                                                   'SEGMENTS': 10,
                                                                   'DISSOLVE': False,
                                                                   'END_CAP_STYLE': 0,
                                                                   'JOIN_STYLE': 0,
                                                                   'MITER_LIMIT': 10,
                                                                   'OUTPUT': 'memory:Buffer_Points'})
                elif self.dlg3.rows.text() != '1':
                    result = processing.run("native:arrayoffsetlines",
                                                 {'INPUT': layers,
                                                  'COUNT': int(rows), 'OFFSET': -(float(self.distanceoffset)), 'SEGMENTS': 8,
                                                  'JOIN_STYLE': 0, 'MITER_LIMIT': 2,
                                                  'OUTPUT': 'memory:'})

                    result_layer = processing.runAndLoadResults("native:addautoincrementalfield",
                                                  {'INPUT': result['OUTPUT'], 'FIELD_NAME': 'Id', 'START': 1,
                                                   'GROUP_FIELDS': [],
                                                   'SORT_EXPRESSION': '', 'SORT_ASCENDING': True,
                                                   'SORT_NULLS_FIRST': False, 'OUTPUT': 'memory:line'})


                    point_result = processing.run("native:pointsalonglines",
                                                 {'INPUT': result_layer['OUTPUT'],
                                                  'DISTANCE': self.point_distance_offset, 'START_OFFSET': 0,
                                                  'END_OFFSET': 0, 'OUTPUT': 'memory:'})
                    points_result = processing.run("native:addautoincrementalfield", {
                        'INPUT': point_result['OUTPUT'],
                        'FIELD_NAME': 'uid', 'START': 1, 'GROUP_FIELDS': ['offset'], 'SORT_EXPRESSION': 'instance',
                        'SORT_ASCENDING': True, 'SORT_NULLS_FIRST': False, 'OUTPUT': 'memory:'})
                    processing.runAndLoadResults("native:buffer", {'INPUT': points_result['OUTPUT'],
                                                                   'DISTANCE': 0.5,
                                                                   'SEGMENTS': 10,
                                                                   'DISSOLVE': False,
                                                                   'END_CAP_STYLE': 0,
                                                                   'JOIN_STYLE': 0,
                                                                   'MITER_LIMIT': 10,
                                                                   'OUTPUT': 'memory:Buffer_Points'})

            if self.dlg3.direction.currentText() == 'Right/Upside' and self.dlg3.output.text() != '' and self.dlg3.pointoutput.text() != '':
                path = self.dlg3.output.text()
                user = path.split("'")
                path = self.dlg3.pointoutput.text()
                user1 = path.split("'")
                if self.dlg3.rows.text() == '1':
                    result = processing.run("native:offsetline",
                                   {'INPUT': layers, 'DISTANCE': float(self.distanceoffset),
                                    'SEGMENTS': 8, 'JOIN_STYLE': 0, 'MITER_LIMIT': 2, 'OUTPUT':'memory:'})
                    result_layer = processing.runAndLoadResults("native:addautoincrementalfield",
                                                  {'INPUT': result['OUTPUT'], 'FIELD_NAME': 'Id', 'START': 1,
                                                   'GROUP_FIELDS': [],
                                                   'SORT_EXPRESSION': '', 'SORT_ASCENDING': True,
                                                   'SORT_NULLS_FIRST': False, 'OUTPUT': user[1]})



                    point_result = processing.run("native:pointsalonglines",
                                                 {'INPUT': result_layer['OUTPUT'],
                                                  'DISTANCE': self.point_distance_offset, 'START_OFFSET': 0,
                                                  'END_OFFSET': 0, 'OUTPUT': 'memory:'})
                    points_result = processing.run("native:addautoincrementalfield", {
                        'INPUT': point_result['OUTPUT'],
                        'FIELD_NAME': 'uid', 'START': 1, 'GROUP_FIELDS': ['offset'], 'SORT_EXPRESSION': 'instance',
                        'SORT_ASCENDING': True, 'SORT_NULLS_FIRST': False, 'OUTPUT': 'memory:'})
                    processing.runAndLoadResults("native:buffer", {'INPUT': points_result['OUTPUT'],
                                                                   'DISTANCE': 0.5,
                                                                   'SEGMENTS': 10,
                                                                   'DISSOLVE': False,
                                                                   'END_CAP_STYLE': 0,
                                                                   'JOIN_STYLE': 0,
                                                                   'MITER_LIMIT': 10,
                                                                   'OUTPUT': user1[1]})
                elif self.dlg3.rows.text() != '':
                    result = processing.run("native:arrayoffsetlines",
                                   {'INPUT': layers,
                                    'COUNT': int(rows), 'OFFSET': float(self.distanceoffset), 'SEGMENTS': 8, 'JOIN_STYLE': 0, 'MITER_LIMIT': 2,
                                    'OUTPUT': 'memory:'})
                    result_layer = processing.runAndLoadResults("native:addautoincrementalfield",
                                                  {'INPUT': result['OUTPUT'], 'FIELD_NAME': 'Id', 'START': 1,
                                                   'GROUP_FIELDS': [],
                                                   'SORT_EXPRESSION': '', 'SORT_ASCENDING': True,
                                                   'SORT_NULLS_FIRST': False, 'OUTPUT': user[1]})


                    point_result = processing.run("native:pointsalonglines",
                                                 {'INPUT': result_layer['OUTPUT'],
                                                  'DISTANCE': self.point_distance_offset, 'START_OFFSET': 0,
                                                  'END_OFFSET': 0, 'OUTPUT': 'memory:'})
                    points_result = processing.run("native:addautoincrementalfield", {
                        'INPUT': point_result['OUTPUT'],
                        'FIELD_NAME': 'uid', 'START': 1, 'GROUP_FIELDS': ['offset'], 'SORT_EXPRESSION': 'instance',
                        'SORT_ASCENDING': True, 'SORT_NULLS_FIRST': False, 'OUTPUT': 'memory:'})
                    processing.runAndLoadResults("native:buffer", {'INPUT': points_result['OUTPUT'],
                                                                   'DISTANCE': 0.5,
                                                                   'SEGMENTS': 10,
                                                                   'DISSOLVE': False,
                                                                   'END_CAP_STYLE': 0,
                                                                   'JOIN_STYLE': 0,
                                                                   'MITER_LIMIT': 10,
                                                                   'OUTPUT': user1[1]})

            if self.dlg3.direction.currentText() == 'Left/Down' and self.dlg3.output.text() != '' and self.dlg3.pointoutput.text() != '':
                path = self.dlg3.output.text()
                user = path.split("'")
                path = self.dlg3.pointoutput.text()
                user1 = path.split("'")
                if self.dlg3.rows.text() == '1':
                    result = processing.run("native:offsetline",
                                                 {'INPUT': layers, 'DISTANCE': -(float(self.distanceoffset)),
                                                  'SEGMENTS': 8, 'JOIN_STYLE': 0, 'MITER_LIMIT': 2,
                                                  'OUTPUT': 'memory:'})
                    result_layer = processing.runAndLoadResults("native:addautoincrementalfield",
                                                  {'INPUT': result['OUTPUT'], 'FIELD_NAME': 'Id', 'START': 1,
                                                   'GROUP_FIELDS': [],
                                                   'SORT_EXPRESSION': '', 'SORT_ASCENDING': True,
                                                   'SORT_NULLS_FIRST': False, 'OUTPUT': user[1]})


                    point_result = processing.run("native:pointsalonglines",
                                                 {'INPUT': result_layer['OUTPUT'],
                                                  'DISTANCE': self.point_distance_offset, 'START_OFFSET': 0,
                                                  'END_OFFSET': 0, 'OUTPUT': 'memory:'})
                    points_result = processing.run("native:addautoincrementalfield", {
                        'INPUT': point_result['OUTPUT'],
                        'FIELD_NAME': 'uid', 'START': 1, 'GROUP_FIELDS': ['offset'], 'SORT_EXPRESSION': 'instance',
                        'SORT_ASCENDING': True, 'SORT_NULLS_FIRST': False, 'OUTPUT': 'memory:'})

                    processing.runAndLoadResults("native:buffer", {'INPUT': points_result['OUTPUT'],
                                                                   'DISTANCE': 0.5,
                                                                   'SEGMENTS': 10,
                                                                   'DISSOLVE': False,
                                                                   'END_CAP_STYLE': 0,
                                                                   'JOIN_STYLE': 0,
                                                                   'MITER_LIMIT': 10,
                                                                   'OUTPUT': user1[1]})
                elif self.dlg3.rows.text() != '1':
                    result = processing.run("native:arrayoffsetlines",
                                                 {'INPUT': layers,
                                                  'COUNT': int(rows), 'OFFSET': -(float(self.distanceoffset)), 'SEGMENTS': 8,
                                                  'JOIN_STYLE': 0, 'MITER_LIMIT': 2,
                                                  'OUTPUT': 'memory:'})
                    result_layer = processing.runAndLoadResults("native:addautoincrementalfield",
                                                  {'INPUT': result['OUTPUT'], 'FIELD_NAME': 'Id', 'START': 1,
                                                   'GROUP_FIELDS': [],
                                                   'SORT_EXPRESSION': '', 'SORT_ASCENDING': True,
                                                   'SORT_NULLS_FIRST': False, 'OUTPUT': user[1]})

                    point_result = processing.run("native:pointsalonglines",
                                                 {'INPUT': result_layer['OUTPUT'],
                                                  'DISTANCE': self.point_distance_offset, 'START_OFFSET': 0,
                                                  'END_OFFSET': 0, 'OUTPUT': 'memory:'})
                    points_result = processing.run("native:addautoincrementalfield", {
                        'INPUT': point_result['OUTPUT'],
                        'FIELD_NAME': 'uid', 'START': 1, 'GROUP_FIELDS': ['offset'], 'SORT_EXPRESSION': 'instance',
                        'SORT_ASCENDING': True, 'SORT_NULLS_FIRST': False, 'OUTPUT': 'memory:'})
                    processing.runAndLoadResults("native:buffer", {'INPUT': points_result['OUTPUT'],
                                                                   'DISTANCE': 0.5,
                                                                   'SEGMENTS': 10,
                                                                   'DISSOLVE': False,
                                                                   'END_CAP_STYLE': 0,
                                                                   'JOIN_STYLE': 0,
                                                                   'MITER_LIMIT': 10,
                                                                   'OUTPUT': user1[1]})

            if self.dlg3.direction.currentText() == 'Right/Upside' and self.dlg3.output.text() == '' and self.dlg3.pointoutput.text() != '':
                path = self.dlg3.pointoutput.text()
                user1 = path.split("'")
                if self.dlg3.rows.text() == '1':
                    result = processing.run("native:offsetline",
                                                           {'INPUT': layers, 'DISTANCE': float(self.distanceoffset),
                                                            'SEGMENTS': 8, 'JOIN_STYLE': 0, 'MITER_LIMIT': 2,
                                                            'OUTPUT': 'memory:'})
                    result_layer = processing.runAndLoadResults("native:addautoincrementalfield",
                                                  {'INPUT': result['OUTPUT'], 'FIELD_NAME': 'Id', 'START': 1,
                                                   'GROUP_FIELDS': [],
                                                   'SORT_EXPRESSION': '', 'SORT_ASCENDING': True,
                                                   'SORT_NULLS_FIRST': False, 'OUTPUT': 'memory:line'})


                    point_result = processing.run("native:pointsalonglines",
                                                 {'INPUT': result_layer['OUTPUT'],
                                                  'DISTANCE': self.point_distance_offset, 'START_OFFSET': 0,
                                                  'END_OFFSET': 0, 'OUTPUT': 'memory:'})

                    points_result = processing.run("native:addautoincrementalfield", {
                        'INPUT': point_result['OUTPUT'],
                        'FIELD_NAME': 'uid', 'START': 1, 'GROUP_FIELDS': ['offset'], 'SORT_EXPRESSION': 'instance',
                        'SORT_ASCENDING': True, 'SORT_NULLS_FIRST': False, 'OUTPUT': 'memory:'})

                    processing.runAndLoadResults("native:buffer", {'INPUT': points_result['OUTPUT'],
                                                                   'DISTANCE': 0.5,
                                                                   'SEGMENTS': 10,
                                                                   'DISSOLVE': False,
                                                                   'END_CAP_STYLE': 0,
                                                                   'JOIN_STYLE': 0,
                                                                   'MITER_LIMIT': 10,
                                                                   'OUTPUT': user1[1]})
                elif self.dlg3.rows.text() != '1':
                    result = processing.runAndLoadResults("native:arrayoffsetlines",
                                                           {'INPUT': layers,
                                                            'COUNT': int(rows), 'OFFSET': float(self.distanceoffset),
                                                            'SEGMENTS': 8,
                                                            'JOIN_STYLE': 0, 'MITER_LIMIT': 2,
                                                            'OUTPUT': 'memory:'})
                    result_layer = processing.runAndLoadResults("native:addautoincrementalfield",
                                                  {'INPUT': result['OUTPUT'], 'FIELD_NAME': 'Id', 'START': 1,
                                                   'GROUP_FIELDS': [],
                                                   'SORT_EXPRESSION': '', 'SORT_ASCENDING': True,
                                                   'SORT_NULLS_FIRST': False, 'OUTPUT': 'memory:line'})

                    point_result = processing.runAndLoadResults("native:pointsalonglines",
                                                 {'INPUT': results['OUTPUT'],
                                                  'DISTANCE': self.point_distance_offset, 'START_OFFSET': 0,
                                                  'END_OFFSET': 0, 'OUTPUT': 'memory:'})
                    points_result = processing.run("native:addautoincrementalfield", {
                        'INPUT': point_result['OUTPUT'],
                        'FIELD_NAME': 'uid', 'START': 1, 'GROUP_FIELDS': ['offset'], 'SORT_EXPRESSION': 'instance',
                        'SORT_ASCENDING': True, 'SORT_NULLS_FIRST': False, 'OUTPUT': 'memory:'})
                    processing.runAndLoadResults("native:buffer", {'INPUT': points_result['OUTPUT'],
                                                                   'DISTANCE': 0.5,
                                                                   'SEGMENTS': 10,
                                                                   'DISSOLVE': False,
                                                                   'END_CAP_STYLE': 0,
                                                                   'JOIN_STYLE': 0,
                                                                   'MITER_LIMIT': 10,
                                                                   'OUTPUT': user1[1]})

            if self.dlg3.direction.currentText() == 'Right/Upside' and self.dlg3.output.text() != '' and self.dlg3.pointoutput.text() == '':
                path = self.dlg3.output.text()
                user = path.split("'")
                if self.dlg3.rows.text() == '1':
                    result = processing.run("native:offsetline",
                                                           {'INPUT': layers, 'DISTANCE': float(self.distanceoffset),
                                                            'SEGMENTS': 8, 'JOIN_STYLE': 0, 'MITER_LIMIT': 2,
                                                            'OUTPUT': 'memory:'})
                    result_layer = processing.runAndLoadResults("native:addautoincrementalfield",
                                                  {'INPUT': result['OUTPUT'], 'FIELD_NAME': 'Id', 'START': 1,
                                                   'GROUP_FIELDS': [],
                                                   'SORT_EXPRESSION': '', 'SORT_ASCENDING': True,
                                                   'SORT_NULLS_FIRST': False, 'OUTPUT': user[1]})

                    point_result = processing.run("native:pointsalonglines",
                                                 {'INPUT': result_layer['OUTPUT'],
                                                  'DISTANCE': self.point_distance_offset, 'START_OFFSET': 0,
                                                  'END_OFFSET': 0, 'OUTPUT': 'memory:'})
                    points_result = processing.run("native:addautoincrementalfield", {
                        'INPUT': point_result['OUTPUT'],
                        'FIELD_NAME': 'uid', 'START': 1, 'GROUP_FIELDS': ['offset'], 'SORT_EXPRESSION': 'instance',
                        'SORT_ASCENDING': True, 'SORT_NULLS_FIRST': False, 'OUTPUT': 'memory:'})
                    processing.runAndLoadResults("native:buffer", {'INPUT': points_result['OUTPUT'],
                                                                   'DISTANCE': 0.5,
                                                                   'SEGMENTS': 10,
                                                                   'DISSOLVE': False,
                                                                   'END_CAP_STYLE': 0,
                                                                   'JOIN_STYLE': 0,
                                                                   'MITER_LIMIT': 10,
                                                                   'OUTPUT': 'memory:Buffer_Points'})
                elif self.dlg3.rows.text() != '1':
                    result = processing.run("native:arrayoffsetlines",
                                                           {'INPUT': layers,
                                                            'COUNT': int(rows), 'OFFSET': float(self.distanceoffset),
                                                            'SEGMENTS': 8,
                                                            'JOIN_STYLE': 0, 'MITER_LIMIT': 2,
                                                            'OUTPUT': 'memory:'})
                    result_layer = processing.runAndLoadResults("native:addautoincrementalfield",
                                                  {'INPUT': result['OUTPUT'], 'FIELD_NAME': 'Id', 'START': 1,
                                                   'GROUP_FIELDS': [],
                                                   'SORT_EXPRESSION': '', 'SORT_ASCENDING': True,
                                                   'SORT_NULLS_FIRST': False, 'OUTPUT': user[1]})

                    point_result = processing.run("native:pointsalonglines",
                                                 {'INPUT': result_layer['OUTPUT'],
                                                  'DISTANCE': self.point_distance_offset, 'START_OFFSET': 0,
                                                  'END_OFFSET': 0, 'OUTPUT':'memory:'})
                    points_result = processing.run("native:addautoincrementalfield", {
                        'INPUT': point_result['OUTPUT'],
                        'FIELD_NAME': 'uid', 'START': 1, 'GROUP_FIELDS': ['offset'], 'SORT_EXPRESSION': 'instance',
                        'SORT_ASCENDING': True, 'SORT_NULLS_FIRST': False, 'OUTPUT': 'memory:'})
                    processing.runAndLoadResults("native:buffer", {'INPUT': points_result['OUTPUT'],
                                                                   'DISTANCE': 0.5,
                                                                   'SEGMENTS': 10,
                                                                   'DISSOLVE': False,
                                                                   'END_CAP_STYLE': 0,
                                                                   'JOIN_STYLE': 0,
                                                                   'MITER_LIMIT': 10,
                                                                   'OUTPUT': 'memory:Buffer_Points'})

            if self.dlg3.direction.currentText() == 'Left/Down' and self.dlg3.output.text() == '' and self.dlg3.pointoutput.text() != '':
                path = self.dlg3.pointoutput.text()
                user1 = path.split("'")
                if self.dlg3.rows.text() == '1':
                    result = processing.run("native:offsetline",
                                                           {'INPUT': layers, 'DISTANCE': -(float(self.distanceoffset)),
                                                            'SEGMENTS': 8, 'JOIN_STYLE': 0, 'MITER_LIMIT': 2,
                                                            'OUTPUT': 'memory:'})
                    result_layer = processing.runAndLoadResults("native:addautoincrementalfield",
                                                  {'INPUT': result['OUTPUT'], 'FIELD_NAME': 'Id', 'START': 1,
                                                   'GROUP_FIELDS': [],
                                                   'SORT_EXPRESSION': '', 'SORT_ASCENDING': True,
                                                   'SORT_NULLS_FIRST': False, 'OUTPUT': 'memory:line'})

                    point_result = processing.run("native:pointsalonglines",
                                                 {'INPUT': result_layer['OUTPUT'],
                                                  'DISTANCE': self.point_distance_offset, 'START_OFFSET': 0,
                                                  'END_OFFSET': 0, 'OUTPUT': 'memory:'})
                    points_result = processing.run("native:addautoincrementalfield", {
                        'INPUT': point_result['OUTPUT'],
                        'FIELD_NAME': 'uid', 'START': 1, 'GROUP_FIELDS': ['offset'], 'SORT_EXPRESSION': 'instance',
                        'SORT_ASCENDING': True, 'SORT_NULLS_FIRST': False, 'OUTPUT': 'memory:'})
                    processing.runAndLoadResults("native:buffer", {'INPUT': points_result['OUTPUT'],
                                                                   'DISTANCE': 0.5,
                                                                   'SEGMENTS': 10,
                                                                   'DISSOLVE': False,
                                                                   'END_CAP_STYLE': 0,
                                                                   'JOIN_STYLE': 0,
                                                                   'MITER_LIMIT': 10,
                                                                   'OUTPUT': user1[1]})
                elif self.dlg3.rows.text() != '1':
                    result = processing.run("native:arrayoffsetlines",
                                                           {'INPUT': layers,
                                                            'COUNT': int(rows), 'OFFSET': -(float(self.distanceoffset)),
                                                            'SEGMENTS': 8,
                                                            'JOIN_STYLE': 0, 'MITER_LIMIT': 2,
                                                            'OUTPUT': 'memory:'})
                    result_layer = processing.runAndLoadResults("native:addautoincrementalfield",
                                                  {'INPUT': result['OUTPUT'], 'FIELD_NAME': 'Id', 'START': 1,
                                                   'GROUP_FIELDS': [],
                                                   'SORT_EXPRESSION': '', 'SORT_ASCENDING': True,
                                                   'SORT_NULLS_FIRST': False, 'OUTPUT': 'memory:line'})

                    point_result = processing.run("native:pointsalonglines",
                                                 {'INPUT': result_layer['OUTPUT'],
                                                  'DISTANCE': self.point_distance_offset, 'START_OFFSET': 0,
                                                  'END_OFFSET': 0, 'OUTPUT': 'memory'})
                    points_result = processing.run("native:addautoincrementalfield", {
                        'INPUT': point_result['OUTPUT'],
                        'FIELD_NAME': 'uid', 'START': 1, 'GROUP_FIELDS': ['offset'], 'SORT_EXPRESSION': 'instance',
                        'SORT_ASCENDING': True, 'SORT_NULLS_FIRST': False, 'OUTPUT': 'memory:'})
                    processing.runAndLoadResults("native:buffer", {'INPUT': points_result['OUTPUT'],
                                                                   'DISTANCE': 0.5,
                                                                   'SEGMENTS': 10,
                                                                   'DISSOLVE': False,
                                                                   'END_CAP_STYLE': 0,
                                                                   'JOIN_STYLE': 0,
                                                                   'MITER_LIMIT': 10,
                                                                   'OUTPUT': user1[1]})

            if self.dlg3.direction.currentText() == 'Left/Down' and self.dlg3.output.text() != '' and self.dlg3.pointoutput.text() == '':
                path = self.dlg3.output.text()
                user = path.split("'")
                if self.dlg3.rows.text() == '1':
                    result = processing.run("native:offsetline",
                                                           {'INPUT': layers, 'DISTANCE': -(float(self.distanceoffset)),
                                                            'SEGMENTS': 8, 'JOIN_STYLE': 0, 'MITER_LIMIT': 2,
                                                            'OUTPUT': 'memory:'})

                    result_layer = processing.runAndLoadResults("native:addautoincrementalfield",
                                                  {'INPUT': result['OUTPUT'], 'FIELD_NAME': 'Id', 'START': 1,
                                                   'GROUP_FIELDS': [],
                                                   'SORT_EXPRESSION': '', 'SORT_ASCENDING': True,
                                                   'SORT_NULLS_FIRST': False, 'OUTPUT': user[1]})


                    point_result = processing.run("native:pointsalonglines",
                                                 {'INPUT':result_layer['OUTPUT'],
                                                  'DISTANCE': self.point_distance_offset, 'START_OFFSET': 0,
                                                  'END_OFFSET': 0, 'OUTPUT': 'memory:'})

                    points_result = processing.run("native:addautoincrementalfield", {
                        'INPUT': point_result['OUTPUT'],
                        'FIELD_NAME': 'uid', 'START': 1, 'GROUP_FIELDS': ['offset'], 'SORT_EXPRESSION': 'instance',
                        'SORT_ASCENDING': True, 'SORT_NULLS_FIRST': False, 'OUTPUT': 'memory:'})

                    processing.runAndLoadResults("native:buffer", {'INPUT': points_result['OUTPUT'],
                                                                   'DISTANCE': 0.5,
                                                                   'SEGMENTS': 10,
                                                                   'DISSOLVE': False,
                                                                   'END_CAP_STYLE': 0,
                                                                   'JOIN_STYLE': 0,
                                                                   'MITER_LIMIT': 10,
                                                                   'OUTPUT': 'memory:Buffer_Points'})
                elif self.dlg3.rows.text() != '1':
                    result = processing.run("native:arrayoffsetlines",
                                                           {'INPUT': layers,
                                                            'COUNT': int(rows), 'OFFSET': -(float(self.distanceoffset)),
                                                            'SEGMENTS': 8,
                                                            'JOIN_STYLE': 0, 'MITER_LIMIT': 2,
                                                            'OUTPUT': 'memory:'})
                    result_layer = processing.runAndLoadResults("native:addautoincrementalfield",
                                                  {'INPUT': result['OUTPUT'], 'FIELD_NAME': 'Id', 'START': 1,
                                                   'GROUP_FIELDS': [],
                                                   'SORT_EXPRESSION': '', 'SORT_ASCENDING': True,
                                                   'SORT_NULLS_FIRST': False, 'OUTPUT': user[1]})


                    point_result = processing.run("native:pointsalonglines",
                                                 {'INPUT': result_layer['OUTPUT'],
                                                  'DISTANCE': self.point_distance_offset, 'START_OFFSET': 0,
                                                  'END_OFFSET': 0, 'OUTPUT': 'memory:'})
                    points_result = processing.run("native:addautoincrementalfield", {
                        'INPUT': point_result['OUTPUT'],
                        'FIELD_NAME': 'uid', 'START': 1, 'GROUP_FIELDS': ['offset'], 'SORT_EXPRESSION': 'instance',
                        'SORT_ASCENDING': True, 'SORT_NULLS_FIRST': False, 'OUTPUT': 'memory:'})

                    processing.runAndLoadResults("native:buffer", {'INPUT': points_result['OUTPUT'],
                                                                   'DISTANCE': 0.5,
                                                                   'SEGMENTS': 10,
                                                                   'DISSOLVE': False,
                                                                   'END_CAP_STYLE': 0,
                                                                   'JOIN_STYLE': 0,
                                                                   'MITER_LIMIT': 10,
                                                                   'OUTPUT': 'memory:Buffer_Points'})

        else:
            msg = QMessageBox()
            msg.setIcon(QMessageBox.Critical)
            msg.setText("Error: Add layer in active directory.")
            # msg.setInformativeText('More information')
            msg.setWindowTitle("Warning: Error")
            msg.exec_()
            pass

    def addToDock(self):
        self.iface.addDockWidget(Qt.RightDockWidgetArea, self.dlg)
        self.dlg.maximumSize()
        self.dlg.show()

    def addToDock2(self):
        self.iface.addDockWidget(Qt.RightDockWidgetArea, self.dlg2)
        self.dlg2.maximumSize()
        self.dlg2.show()

    def addToDock3(self):
        self.iface.addDockWidget(Qt.RightDockWidgetArea, self.dlg3)
        self.dlg3.maximumSize()
        self.dlg3.show()

    def enableWidgets(self):
        self.dlg.distance.setEnabled(True)
        self.dlg.output.setEnabled(True)
        self.dlg.Browse.setEnabled(True)

    def addLogo(self):
        draw_icon = QIcon(self.plugin_dir + "/north-point-icon-png.png")
        self.dlg.draw.setIcon(draw_icon)
        reset_icon = QIcon(self.plugin_dir + "/reset.png")
        self.dlg.reset_button.setIcon(reset_icon)

    def checkbox(self):
        if self.dlg.checkBox.isChecked() == True:
            self.dlg.draw.setEnabled(False)
            self.dlg.mMapLayerComboBox.setEnabled(True)
            self.dlg.start.setEnabled(True)
            self.dlg.end.setEnabled(True)
            self.dlg.length.setEnabled(False)

        elif self.dlg.checkBox.isChecked() == False:
            self.dlg.draw.setEnabled(True)
            self.dlg.mMapLayerComboBox.setEnabled(False)
            self.dlg.start.setEnabled(False)
            self.dlg.end.setEnabled(False)
            self.dlg.length.setEnabled(True)

    def run(self):
        """Run method that performs all the real work"""
        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        #if self.first_start == True:
        #self.first_start = False
        self.dlg = PointInterpolationDialog()
        #self.iface.addDockWidget(Qt.RightDockWidgetArea, self.dlg)
        #self.dlg.maximumSize()
        #self.dlg.show()
        self.addToDock()
        self.addLogo()
        self.dlg.distance.setText(str(1))
        self.dlg.line.setPlaceholderText("Select Line Layer Output Directory")
        self.dlg.points.setPlaceholderText("Select Points Layer Output Directory")
        self.dlg.draw.clicked.connect(self.points)
        self.dlg.run.clicked.connect(self.draw)
        self.dlg.reset_button.clicked.connect(self.clearProject)
        self.dlg.directory.clicked.connect(self.OpenBrowse)
        self.dlg.directory2.clicked.connect(self.OpenBrowse2)
        self.dlg.mMapLayerComboBox.setEnabled(False)
        self.dlg.checkBox.stateChanged.connect(self.checkbox)
        self.dlg.start.setText('0.000')
        self.dlg.end.setText('1.000')
        self.dlg.start.setEnabled(False)
        self.dlg.end.setEnabled(False)
        #self.dlg.show()
        # Run the dialog event loop
       # result = self.dlg.exec_()
        # See if OK was pressed
        #if result:
        # Do something useful here - delete the line containing pass and
        # substitute with your code.
            #pass

    def run1(self):
        self.dlg2 = PointOffsetDialog()
        self.addToDock2()
        self.dlg2.distance.setText(str(5))
        self.dlg2.direction.addItem('Right/Upside')
        self.dlg2.direction.addItem('Left/Down')
        self.dlg2.rows.setText(str(1))
        self.dlg2.output.setPlaceholderText("Select Output Directory")
        self.dlg2.browse.clicked.connect(self.OpenBrowse3)
        self.dlg2.run.clicked.connect(self.offsetline)
        # show the dialog
        #self.dlg2.show()
        # Run the dialog event loop
        #result = self.dlg2.exec_()
        # See if OK was pressed
        #if result:
           #pass

    def run2(self):
        self.dlg3 = OffsetInterpolateDialog()
        self.addToDock3()
        self.dlg3.line_distance.setText(str(5))
        self.dlg3.points_distance.setText(str(5))
        self.dlg3.direction.addItem('Right/Upside')
        self.dlg3.direction.addItem('Left/Down')
        self.dlg3.rows.setText(str(1))
        self.dlg3.output.setPlaceholderText("Select Output Directory for Line Offset Layer.")
        self.dlg3.pointoutput.setPlaceholderText("Select Output Directory for interpolated points buffer.")
        self.dlg3.browse.clicked.connect(self.OpenBrowse4)
        self.dlg3.Browse2.clicked.connect(self.OpenBrowse5)
        self.dlg3.run.clicked.connect(self.offsetinterpolate)

        # show the dialog
        #self.dlg3.show()
        # Run the dialog event loop
        #result = self.dlg3.exec_()
        # See if OK was pressed
        #if result:
           #pass